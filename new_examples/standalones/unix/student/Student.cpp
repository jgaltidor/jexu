//This code is generated by Jexu.

#include "Student.h"
#include "JexuHelper.h"
#include "JexuJavaException.h"

Student::Student(char* para0,jint para1,jfloat para2) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"<init>","(Ljava/lang/String;IF)V");
	javaObject=env->NewObject(clazz,methodID, env->NewStringUTF(para0), para1, para2);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

char* Student::getName() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"getName","()Ljava/lang/String;");
	char* returnThing = JNU_GetStringNativeChars(env, (jstring) env->CallObjectMethod(javaObject,methodID));

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

jint Student::getAge() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"getAge","()I");
	jint returnThing = env->CallIntMethod(javaObject,methodID);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

jfloat Student::getGPA() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"getGPA","()F");
	jfloat returnThing = env->CallFloatMethod(javaObject,methodID);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

void Student::setName(char* para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"setName","(Ljava/lang/String;)V");
	env->CallVoidMethod(javaObject,methodID, env->NewStringUTF(para0));

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

void Student::setAge(jint para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"setAge","(I)V");
	env->CallVoidMethod(javaObject,methodID, para0);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

void Student::setGPA(jfloat para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("Student");
	methodID=env->GetMethodID(clazz,"setGPA","(F)V");
	env->CallVoidMethod(javaObject,methodID, para0);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

