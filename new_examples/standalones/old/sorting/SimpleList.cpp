//This code is generated by Jexu.

#include "SimpleList.h"
#include "JexuHelper.h"
#include "JexuJavaException.h"

SimpleList::SimpleList() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"<init>","()V");
	javaObject=env->NewObject(clazz,methodID);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

SimpleList::SimpleList(SimpleList para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"<init>","(LSimpleList;)V");
	javaObject=env->NewObject(clazz,methodID, para0.javaObject);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

SimpleList::SimpleList(char* para0) throw (NumberFormatException) 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"<init>","(Ljava/lang/String;)V");
	javaObject=env->NewObject(clazz,methodID, env->NewStringUTF(para0));

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// check for NumberFormatException exception
		exceptionClass = env->FindClass("java/lang/NumberFormatException");
		if (exceptionClass && env->IsInstanceOf(exc, exceptionClass))
		{
			NumberFormatException e;
			e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
			throw e;
		}
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

jboolean SimpleList::add(char* para0) throw (NumberFormatException) 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"add","(Ljava/lang/String;)Z");
	jboolean returnThing = env->CallBooleanMethod(javaObject,methodID, env->NewStringUTF(para0));

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// check for NumberFormatException exception
		exceptionClass = env->FindClass("java/lang/NumberFormatException");
		if (exceptionClass && env->IsInstanceOf(exc, exceptionClass))
		{
			NumberFormatException e;
			e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
			throw e;
		}
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

jboolean SimpleList::add(jint para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"add","(I)Z");
	jboolean returnThing = env->CallBooleanMethod(javaObject,methodID, para0);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

SimpleList SimpleList::sort() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"sort","()LSimpleList;");
	SimpleList returnThing;
	SimpleList returnThing = env->CallObjectMethod(javaObject,methodID);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

SimpleListIterator SimpleList::iterator() throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetMethodID(clazz,"iterator","()LSimpleListIterator;");
	SimpleListIterator returnThing;
	SimpleListIterator returnThing = env->CallObjectMethod(javaObject,methodID);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

	return returnThing;
}

void SimpleList::main(char*Array para0) throw () 
{
	JavaVM *jvm;
	JNIEnv *env;
	jmethodID methodID;
	jvm = JNU_GetJavaVM(&env);
	if (jvm == NULL)
	{
		jvm = JNU_CreateJavaVM(&env);
	}
	jclass clazz;

	clazz=env->FindClass("SimpleList");
	methodID=env->GetStaticMethodID(clazz,"main","([jobject)V");
	env->CallStaticVoidMethod(clazz,methodID, para0);

	jthrowable exc = env->ExceptionOccurred();
	if(exc)
	{
		env->ExceptionClear();
		jclass exceptionClass;
		// generic exception
		JexuJavaException e;
		e.javaExceptionObject = static_cast<jthrowable>(env->NewGlobalRef(exc));
		throw e;
	}

}

